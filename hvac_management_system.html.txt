<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HVAC Management System - Login</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css" />
    <style>
        /* Global Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header Styles */
        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: bold;
            color: #667eea;
        }

        .nav-buttons {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        /* Button Styles */
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-google {
            background: #fff;
            color: #333;
            border: 2px solid #ddd;
        }

        .btn-google:hover {
            background: #f8f9fa;
            border-color: #667eea;
        }

        .btn-logout {
            background: #dc3545;
            font-size: 14px;
            padding: 8px 16px;
        }

        .btn-logout:hover {
            background: #c82333;
        }

        /* Login Page Styles */
        .login-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }

        .login-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 3rem;
            border-radius: 20px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.2);
            text-align: center;
            max-width: 400px;
            width: 100%;
        }

        .login-card h1 {
            margin-bottom: 0.5rem;
            color: #333;
            font-size: 2rem;
        }

        .login-card p {
            color: #666;
            margin-bottom: 2rem;
        }

        /* Main Content Styles */
        main {
            padding: 2rem 0;
        }

        .page-title {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 15px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            text-align: center;
        }

        .page-title h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        /* Content Cards */
        .content-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }

        /* Table Styles */
        .table-container {
            overflow-x: auto;
            margin-bottom: 2rem;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        th, td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        th {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            font-weight: 600;
        }

        tr:hover {
            background: #f8f9fa;
        }

        .clickable-row {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .clickable-row:hover {
            background: #e3f2fd;
        }

        /* Map Styles */
        .map-container {
            height: 400px;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            margin-top: 1rem;
        }

        #map {
            height: 100%;
            width: 100%;
        }

        /* Loading and Error States */
        .loading {
            text-align: center;
            padding: 3rem;
            font-size: 1.2rem;
            color: #666;
        }

        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
            border-left: 4px solid #dc3545;
        }

        .access-denied {
            text-align: center;
            padding: 4rem 2rem;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }

        .access-denied h2 {
            color: #dc3545;
            margin-bottom: 1rem;
            font-size: 2rem;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }

            .nav-buttons {
                width: 100%;
                justify-content: center;
            }

            .container {
                padding: 10px;
            }

            .login-card {
                padding: 2rem;
                margin: 1rem;
            }

            .page-title h1 {
                font-size: 2rem;
            }

            .map-container {
                height: 300px;
            }

            table {
                font-size: 14px;
            }

            th, td {
                padding: 0.5rem;
            }
        }

        /* Hidden class for page switching */
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <!-- LOGIN PAGE -->
    <div id="loginPage">
        <div class="login-container">
            <div class="login-card">
                <h1>HVAC Management</h1>
                <p>Secure access for authorized personnel</p>
                <button id="googleSignInBtn" class="btn btn-google">
                    <svg width="20" height="20" viewBox="0 0 24 24">
                        <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                        <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                        <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                        <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                    </svg>
                    Sign in with Google
                </button>
                <div id="loginError" class="error hidden"></div>
            </div>
        </div>
    </div>

    <!-- MAIN APP -->
    <div id="mainApp" class="hidden">
        <!-- Header -->
        <header>
            <div class="header-content">
                <div class="logo">üè¢ HVAC Management</div>
                <div class="nav-buttons">
                    <span id="userEmail"></span>
                    <button id="logoutBtn" class="btn btn-logout">Logout</button>
                </div>
            </div>
        </header>

        <div class="container">
            <!-- COMPANIES PAGE -->
            <div id="companiesPage" class="hidden">
                <div class="page-title">
                    <h1>Companies</h1>
                    <p>Select a company to view their stores</p>
                </div>
                
                <div class="content-card">
                    <div id="companiesLoading" class="loading">Loading companies...</div>
                    <div id="companiesError" class="error hidden"></div>
                    
                    <div id="companiesContent" class="hidden">
                        <div class="table-container">
                            <table id="companiesTable">
                                <thead>
                                    <tr>
                                        <th>Company Name</th>
                                        <th>Address</th>
                                        <th>Contact</th>
                                        <th>Stores Count</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                        
                        <div class="map-container">
                            <div id="companiesMap"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- STORES PAGE -->
            <div id="storesPage" class="hidden">
                <div class="page-title">
                    <h1 id="storesTitle">Stores</h1>
                    <p>Select a store to view equipment</p>
                    <button id="backToCompanies" class="btn" style="margin-top: 1rem;">‚Üê Back to Companies</button>
                </div>
                
                <div class="content-card">
                    <div id="storesLoading" class="loading">Loading stores...</div>
                    <div id="storesError" class="error hidden"></div>
                    
                    <div id="storesContent" class="hidden">
                        <div class="table-container">
                            <table id="storesTable">
                                <thead>
                                    <tr>
                                        <th>Store Name</th>
                                        <th>Address</th>
                                        <th>Manager</th>
                                        <th>Equipment Count</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                        
                        <div class="map-container">
                            <div id="storesMap"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- EQUIPMENT PAGE -->
            <div id="equipmentPage" class="hidden">
                <div class="page-title">
                    <h1 id="equipmentTitle">Equipment</h1>
                    <p>HVAC equipment for this location</p>
                    <button id="backToStores" class="btn" style="margin-top: 1rem;">‚Üê Back to Stores</button>
                </div>
                
                <div class="content-card">
                    <div id="equipmentLoading" class="loading">Loading equipment...</div>
                    <div id="equipmentError" class="error hidden"></div>
                    
                    <div id="equipmentContent" class="hidden">
                        <div class="table-container">
                            <table id="equipmentTable">
                                <thead>
                                    <tr>
                                        <th>Equipment ID</th>
                                        <th>Type</th>
                                        <th>Brand</th>
                                        <th>Model</th>
                                        <th>Install Date</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js"></script>
    <script src="https://accounts.google.com/gsi/client"></script>
    
    <script>
        // ============================================================================
        // CONFIGURATION
        // ============================================================================
        
        const CONFIG = {
            // Replace with your Google OAuth Client ID
            GOOGLE_CLIENT_ID: 'YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com',
            
            // Replace with your Google Apps Script Web App URL
            SHEETS_API_URL: 'https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec',
            
            // Allowed email domains (company domains only)
            ALLOWED_DOMAINS: ['mycompany.com', 'example.com'],
            
            // Default map center (you can change this to your company HQ)
            DEFAULT_MAP_CENTER: [40.7128, -74.0060], // New York City
            DEFAULT_MAP_ZOOM: 10
        };

        // ============================================================================
        // GLOBAL STATE
        // ============================================================================
        
        let currentUser = null;
        let currentPage = 'login';
        let currentCompanyId = null;
        let currentStoreId = null;
        let companiesMap = null;
        let storesMap = null;
        
        // Mock data for demonstration (replace with actual API calls)
        const mockData = {
            companies: [
                {
                    id: 1,
                    name: 'HVAC Solutions Inc.',
                    address: '123 Main St, New York, NY',
                    contact: 'john@hvacsolutions.com',
                    storesCount: 5,
                    lat: 40.7589,
                    lng: -73.9851
                },
                {
                    id: 2,
                    name: 'Climate Control Corp',
                    address: '456 Oak Ave, Brooklyn, NY',
                    contact: 'sarah@climatecontrol.com',
                    storesCount: 3,
                    lat: 40.6782,
                    lng: -73.9442
                },
                {
                    id: 3,
                    name: 'Air Tech Services',
                    address: '789 Pine Rd, Queens, NY',
                    contact: 'mike@airtech.com',
                    storesCount: 8,
                    lat: 40.7282,
                    lng: -73.7949
                }
            ],
            stores: [
                // Company 1 stores
                {
                    id: 1,
                    companyId: 1,
                    name: 'Manhattan Branch',
                    address: '100 Broadway, New York, NY',
                    manager: 'Alice Johnson',
                    equipmentCount: 12,
                    lat: 40.7074,
                    lng: -74.0113
                },
                {
                    id: 2,
                    companyId: 1,
                    name: 'Uptown Location',
                    address: '200 W 125th St, New York, NY',
                    manager: 'Bob Smith',
                    equipmentCount: 8,
                    lat: 40.8176,
                    lng: -73.9482
                },
                // Company 2 stores
                {
                    id: 3,
                    companyId: 2,
                    name: 'Brooklyn Central',
                    address: '300 Atlantic Ave, Brooklyn, NY',
                    manager: 'Carol Davis',
                    equipmentCount: 15,
                    lat: 40.6892,
                    lng: -73.9442
                },
                // Company 3 stores
                {
                    id: 4,
                    companyId: 3,
                    name: 'Queens Plaza',
                    address: '400 Northern Blvd, Queens, NY',
                    manager: 'David Wilson',
                    equipmentCount: 20,
                    lat: 40.7505,
                    lng: -73.9425
                }
            ],
            equipment: [
                // Store 1 equipment
                {
                    id: 'HVAC-001',
                    storeId: 1,
                    type: 'Air Conditioner',
                    brand: 'Carrier',
                    model: 'XCV-2000',
                    installDate: '2022-03-15',
                    status: 'Active'
                },
                {
                    id: 'HVAC-002',
                    storeId: 1,
                    type: 'Furnace',
                    brand: 'Trane',
                    model: 'TUH1B080A9421A',
                    installDate: '2021-11-08',
                    status: 'Active'
                },
                {
                    id: 'HVAC-003',
                    storeId: 1,
                    type: 'Heat Pump',
                    brand: 'Rheem',
                    model: 'RP1448BJ1NA',
                    installDate: '2023-01-20',
                    status: 'Maintenance'
                },
                // Store 2 equipment
                {
                    id: 'HVAC-004',
                    storeId: 2,
                    type: 'Air Conditioner',
                    brand: 'Lennox',
                    model: 'XC25-024-230',
                    installDate: '2022-07-12',
                    status: 'Active'
                },
                {
                    id: 'HVAC-005',
                    storeId: 2,
                    type: 'Ventilation System',
                    brand: 'Honeywell',
                    model: 'VNT-3000',
                    installDate: '2021-09-30',
                    status: 'Active'
                }
            ]
        };

        // ============================================================================
        // AUTHENTICATION FUNCTIONS
        // ============================================================================
        
        function initializeGoogleAuth() {
            google.accounts.id.initialize({
                client_id: CONFIG.GOOGLE_CLIENT_ID,
                callback: handleGoogleSignIn,
                auto_select: false,
                cancel_on_tap_outside: false
            });
        }

        function handleGoogleSignIn(response) {
            try {
                const payload = JSON.parse(atob(response.credential.split('.')[1]));
                const email = payload.email;
                const domain = email.split('@')[1];
                
                if (!CONFIG.ALLOWED_DOMAINS.includes(domain)) {
                    showError('loginError', 'Access denied. Only company email addresses are allowed.');
                    return;
                }
                
                currentUser = {
                    email: email,
                    name: payload.name,
                    picture: payload.picture
                };
                
                showMainApp();
            } catch (error) {
                showError('loginError', 'Failed to process Google sign-in. Please try again.');
            }
        }

        function signOut() {
            google.accounts.id.disableAutoSelect();
            currentUser = null;
            currentPage = 'login';
            currentCompanyId = null;
            currentStoreId = null;
            
            showPage('loginPage');
            hideElement('mainApp');
        }

        // ============================================================================
        // API FUNCTIONS
        // ============================================================================
        
        async function fetchFromSheetsAPI(endpoint) {
            try {
                // In a real implementation, you would make actual API calls here
                // const response = await fetch(`${CONFIG.SHEETS_API_URL}?action=${endpoint}`);
                // const data = await response.json();
                
                // For demonstration, we'll use mock data with a delay
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                switch (endpoint) {
                    case 'companies':
                        return mockData.companies;
                    case 'stores':
                        return mockData.stores.filter(store => 
                            currentCompanyId ? store.companyId === parseInt(currentCompanyId) : true
                        );
                    case 'equipment':
                        return mockData.equipment.filter(equipment => 
                            currentStoreId ? equipment.storeId === parseInt(currentStoreId) : true
                        );
                    default:
                        throw new Error('Unknown endpoint');
                }
            } catch (error) {
                console.error('API Error:', error);
                throw error;
            }
        }

        // ============================================================================
        // UI HELPER FUNCTIONS
        // ============================================================================
        
        function showPage(pageId) {
            // Hide all pages
            const pages = ['loginPage', 'companiesPage', 'storesPage', 'equipmentPage'];
            pages.forEach(id => hideElement(id));
            
            // Show the requested page
            showElement(pageId);
            currentPage = pageId.replace('Page', '');
        }

        function showElement(elementId) {
            const element = document.getElementById(elementId);
            if (element) {
                element.classList.remove('hidden');
            }
        }

        function hideElement(elementId) {
            const element = document.getElementById(elementId);
            if (element) {
                element.classList.add('hidden');
            }
        }

        function showError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (errorElement) {
                errorElement.textContent = message;
                errorElement.classList.remove('hidden');
            }
        }

        function hideError(elementId) {
            const errorElement = document.getElementById(elementId);
            if (errorElement) {
                errorElement.classList.add('hidden');
            }
        }

        function showMainApp() {
            document.getElementById('userEmail').textContent = currentUser.email;
            showElement('mainApp');
            hideElement('loginPage');
            loadCompanies();
        }

        // ============================================================================
        // MAP FUNCTIONS
        // ============================================================================
        
        function initializeMap(containerId, items, onMarkerClick) {
            // Destroy existing map if it exists
            if (containerId === 'companiesMap' && companiesMap) {
                companiesMap.remove();
            }
            if (containerId === 'storesMap' && storesMap) {
                storesMap.remove();
            }
            
            const map = L.map(containerId).setView(CONFIG.DEFAULT_MAP_CENTER, CONFIG.DEFAULT_MAP_ZOOM);
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(map);
            
            // Add markers for each item
            const markers = [];
            items.forEach(item => {
                if (item.lat && item.lng) {
                    const marker = L.marker([item.lat, item.lng]).addTo(map);
                    
                    const popupContent = `
                        <div style="text-align: center;">
                            <strong>${item.name}</strong><br>
                            <small>${item.address}</small><br>
                            <button onclick="${onMarkerClick}(${item.id})" 
                                    style="margin-top: 8px; padding: 4px 8px; background: #667eea; color: white; border: none; border-radius: 4px; cursor: pointer;">
                                View Details
                            </button>
                        </div>
                    `;
                    
                    marker.bindPopup(popupContent);
                    markers.push(marker);
                }
            });
            
            // Fit map to show all markers
            if (markers.length > 0) {
                const group = new L.featureGroup(markers);
                map.fitBounds(group.getBounds().pad(0.1));
            }
            
            // Store map reference
            if (containerId === 'companiesMap') {
                companiesMap = map;
            } else if (containerId === 'storesMap') {
                storesMap = map;
            }
            
            return map;
        }

        // ============================================================================
        // COMPANIES PAGE FUNCTIONS
        // ============================================================================
        
        async function loadCompanies() {
            showPage('companiesPage');
            showElement('companiesLoading');
            hideElement('companiesContent');
            hideError('companiesError');
            
            try {
                const companies = await fetchFromSheetsAPI('companies');
                displayCompanies(companies);
                initializeMap('companiesMap', companies, 'selectCompany');
                
                hideElement('companiesLoading');
                showElement('companiesContent');
            } catch (error) {
                hideElement('companiesLoading');
                showError('companiesError', 'Failed to load companies. Please try again.');
            }
        }

        function displayCompanies(companies) {
            const tbody = document.querySelector('#companiesTable tbody');
            tbody.innerHTML = '';
            
            companies.forEach(company => {
                const row = document.createElement('tr');
                row.className = 'clickable-row';
                row.onclick = () => selectCompany(company.id);
                
                row.innerHTML = `
                    <td><strong>${company.name}</strong></td>
                    <td>${company.address}</td>
                    <td>${company.contact}</td>
                    <td>${company.storesCount} stores</td>
                `;
                
                tbody.appendChild(row);
            });
        }

        function selectCompany(companyId) {
            currentCompanyId = companyId;
            loadStores();
        }

        // ============================================================================
        // STORES PAGE FUNCTIONS
        // ============================================================================
        
        async function loadStores() {
            showPage('storesPage');
            showElement('storesLoading');
            hideElement('storesContent');
            hideError('storesError');
            
            try {
                const stores = await fetchFromSheetsAPI('stores');
                const company = mockData.companies.find(c => c.id === parseInt(currentCompanyId));
                
                document.getElementById('storesTitle').textContent = `${company.name} - Stores`;
                
                displayStores(stores);
                initializeMap('storesMap', stores, 'selectStore');
                
                hideElement('storesLoading');
                showElement('storesContent');
            } catch (error) {
                hideElement('storesLoading');
                showError('storesError', 'Failed to load stores. Please try again.');
            }
        }

        function displayStores(stores) {
            const tbody = document.querySelector('#storesTable tbody');
            tbody.innerHTML = '';
            
            stores.forEach(store => {
                const row = document.createElement('tr');
                row.className = 'clickable-row';
                row.onclick = () => selectStore(store.id);
                
                row.innerHTML = `
                    <td><strong>${store.name}</strong></td>
                    <td>${store.address}</td>
                    <td>${store.manager}</td>
                    <td>${store.equipmentCount} units</td>
                `;
                
                tbody.appendChild(row);
            });
        }

        function selectStore(storeId) {
            currentStoreId = storeId;
            loadEquipment();
        }

        // ============================================================================
        // EQUIPMENT PAGE FUNCTIONS
        // ============================================================================
        
        async function loadEquipment() {
            showPage('equipmentPage');
            showElement('equipmentLoading');
            hideElement('equipmentContent');
            hideError('equipmentError');
            
            try {
                const equipment = await fetchFromSheetsAPI('equipment');
                const store = mockData.stores.find(s => s.id === parseInt(currentStoreId));
                
                document.getElementById('equipmentTitle').textContent = `${store.name} - Equipment`;
                
                displayEquipment(equipment);
                
                hideElement('equipmentLoading');
                showElement('equipmentContent');
            } catch (error) {
                hideElement('equipmentLoading');
                showError('equipmentError', 'Failed to load equipment. Please try again.');
            }
        }

        function displayEquipment(equipment) {
            const tbody = document.querySelector('#equipmentTable tbody');
            tbody.innerHTML = '';
            
            equipment.forEach(item => {
                const row = document.createElement('tr');
                
                // Status styling
                let statusClass = '';
                let statusColor = '';
                switch (item.status.toLowerCase()) {
                    case 'active':
                        statusClass = 'status-active';
                        statusColor = '#28a745';
                        break;
                    case 'maintenance':
                        statusClass = 'status-maintenance';
                        statusColor = '#ffc107';
                        break;
                    case 'inactive':
                        statusClass = 'status-inactive';
                        statusColor = '#dc3545';
                        break;
                    default:
                        statusColor = '#6c757d';
                }
                
                row.innerHTML = `
                    <td><strong>${item.id}</strong></td>
                    <td>${item.type}</td>
                    <td>${item.brand}</td>
                    <td>${item.model}</td>
                    <td>${item.installDate}</td>
                    <td><span style="color: ${statusColor}; font-weight: bold;">‚óè</span> ${item.status}</td>
                `;
                
                tbody.appendChild(row);
            });
        }

        // ============================================================================
        // EVENT LISTENERS AND INITIALIZATION
        // ============================================================================
        
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Google Auth
            if (typeof google !== 'undefined') {
                initializeGoogleAuth();
            } else {
                console.error('Google Identity Services not loaded');
            }
            
            // Google Sign In Button
            document.getElementById('googleSignInBtn').addEventListener('click', function() {
                google.accounts.id.prompt();
            });
            
            // Logout Button
            document.getElementById('logoutBtn').addEventListener('click', signOut);
            
            // Navigation Buttons
            document.getElementById('backToCompanies').addEventListener('click', loadCompanies);
            document.getElementById('backToStores').addEventListener('click', loadStores);
            
            // Check if user is already logged in (for demo purposes)
            // In a real app, you'd check for valid session/token
            if (window.location.hash === '#demo') {
                currentUser = { email: 'demo@mycompany.com', name: 'Demo User' };
                showMainApp();
            }
        });

        // Handle browser back/forward buttons
        window.addEventListener('popstate', function(event) {
            if (event.state && event.state.page) {
                switch (event.state.page) {
                    case 'companies':
                        loadCompanies();
                        break;
                    case 'stores':
                        if (event.state.companyId) {
                            currentCompanyId = event.state.companyId;
                            loadStores();
                        }
                        break;
                    case 'equipment':
                        if (event.state.storeId) {
                            currentStoreId = event.state.storeId;
                            loadEquipment();
                        }
                        break;
                }
            }
        });

        // Global functions for map marker clicks (needed for popup buttons)
        window.selectCompany = selectCompany;
        window.selectStore = selectStore;
        
        // ============================================================================
        // DEMO MODE INSTRUCTIONS
        // ============================================================================
        
        console.log(`
        üè¢ HVAC Management System Demo
        
        To test this application:
        
        1. DEMO MODE: Add #demo to the URL to skip Google login
           Example: your-url.com#demo
        
        2. PRODUCTION SETUP:
           - Replace CONFIG.GOOGLE_CLIENT_ID with your actual Google OAuth client ID
           - Replace CONFIG.SHEETS_API_URL with your Google Apps Script web app URL
           - Update CONFIG.ALLOWED_DOMAINS with your company domains
           - Replace mockData with actual API calls to your Google Sheets
        
        3. GOOGLE SHEETS SETUP:
           Create a Google Sheet with 3 tabs:
           - Companies: id, name, address, contact, storesCount, lat, lng
           - Stores: id, companyId, name, address, manager, equipmentCount, lat, lng  
           - Equipment: id, storeId, type, brand, model, installDate, status
        
        4. GOOGLE APPS SCRIPT:
           Create a web app that reads from your Google Sheets and returns JSON data
           Make sure to deploy it as "Execute as: Me" and "Who has access: Anyone"
        
        Features included:
        ‚úÖ Google OAuth authentication with domain restriction
        ‚úÖ Multi-page navigation (Companies ‚Üí Stores ‚Üí Equipment)
        ‚úÖ Interactive Leaflet maps with OpenStreetMap
        ‚úÖ Responsive design that works on mobile
        ‚úÖ Clean, modern UI with animations
        ‚úÖ Error handling and loading states
        ‚úÖ Browser back/forward button support
        ‚úÖ Secure logout functionality
        `);
    </script>
</body>
</html>